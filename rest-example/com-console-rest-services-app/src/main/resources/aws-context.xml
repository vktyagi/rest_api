<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<context:property-placeholder
		location="file:${catalina.home}/conf/application.properties"
		ignore-unresolvable="true" />
	<!-- AMAZON AWS -->
	<bean id="awsCredentials" class="com.amazonaws.auth.BasicAWSCredentials"
		c:accessKey="${aws.accesskey}" c:secretKey="${aws.secretkey} " scope="singleton" />

	<bean id="snsClient" class="com.amazonaws.services.sns.AmazonSNSClient">
		<constructor-arg ref="awsCredentials" />
	</bean>
	
	<bean id="s3Client" class="com.amazonaws.services.s3.AmazonS3Client">
		<constructor-arg ref="awsCredentials" />
	</bean>

	<bean id="topicArn" class="java.lang.String">
		<constructor-arg value="${topic.arn}" />
	</bean>
	<bean id="exptopicArn" class="java.lang.String">
		<constructor-arg value="${topic.exception.arn}" />
	</bean>
	<bean id="restBaseURL" class="java.lang.String">
		<constructor-arg value="${host.baseurl}" />
	</bean>
	<bean id="snsEndpoint" class="java.lang.String">
		<constructor-arg value="${sns.endpoint}" />
	</bean>
	<bean id="s3Url" class="java.lang.String">
		<constructor-arg value="${aws.s3.url}" />
	</bean>
	<bean id="s3Bucket" class="java.lang.String">
		<constructor-arg value="${aws.s3.bucket}" />
	</bean>
	
	<bean id="s3SSPOrderSummaryPrefix" class="java.lang.String">
		<constructor-arg value="${aws.s3.ssp.order.summary.prefix}" />
	</bean>
	<bean id="s3SSPOrderDetailPrefix" class="java.lang.String">
		<constructor-arg value="${aws.s3.ssp.order.detail.prefix}" />
	</bean>
	
	
	<bean id="multipartResolver"
    class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
    p:defaultEncoding="utf-8" >
    <!-- one of the properties available; the maximum file size in bytes -->  
    <!-- <property name="maxUploadSize" value="40000000" /> -->  
</bean>
	<!-- <bean id="mapQueueMessageSender" class="com.ipg.mediabrands.map.common.queue.impl.MapQueueMessageSenderImpl" 
		/> <util:map id="awsQueues" key-type="com.ipg.mediabrands.map.common.MapQueueMessageType" 
		value-type="com.ipg.mediabrands.map.common.queue.impl.QueueConfig"> <entry 
		key = "#{T(com.ipg.mediabrands.map.common.MapQueueMessageType).TOATAL_TAG_PUBLISH}" 
		value-ref="pulishQueue" /> <entry key = "#{T(com.ipg.mediabrands.map.common.MapQueueMessageType).TOTAL_TAG_NORMALIZATION}" 
		value-ref="normalizeQueue" /> </util:map> <bean id="pulishQueue" class="com.ipg.mediabrands.map.common.queue.impl.QueueConfig"> 
		<property name="name" value="${publish.queue.name}" /> </bean> <bean id="normalizeQueue" 
		class="com.ipg.mediabrands.map.common.queue.impl.QueueConfig"> <property 
		name="name" value="${normalize.queue.name}" /> </bean> -->
</beans>
